- dashboard_async_cache dashboard, block, async, settings do

  - query = klass.visible.find_by id: settings[:query_id]
  - if query
    ruby:
      query.project = @project if query_block[:with_project]
      count = query.send query_block[:count_method]
      query.column_names = settings[:columns].split(',').map(&:to_sym) if settings[:columns].present?
      query.sort_criteria = params[:sort] if params[:sort].present?

    h3.query-list-block
      = dashboard_query_list_block_title query, query_block, @project
      = " (#{count})"
      = dashboard_query_list_block_alerts dashboard, query, block_definition

    - if query.respond_to?(:description) && query.description.present?
      .query-description
        = textilizable query, :description

    - if count.positive?
      / required by some helpers of other plugins
      - @query = query

      = render partial: query_block[:list_partial],
               locals: { query_block[:entities_var] => query.send(query_block[:entries_method],
                                                                  limit: settings[:max_entries] || DashboardContent::DEFAULT_MAX_ENTRIES),
                         query: query,
                         query_options: { sort_param: 'sort',
                                          sort_link_options: { method: :post, remote: true } } }
    - else
      p.nodata = l :label_no_data
  - else
    p.nodata = l :label_no_data

  - if Additionals.setting? :open_external_urls
    javascript:
      $(function() {
        openExternalUrlsInTab();
      });
